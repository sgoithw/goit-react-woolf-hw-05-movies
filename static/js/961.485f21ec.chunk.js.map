{"version":3,"file":"static/js/961.485f21ec.chunk.js","mappings":"+MA+CA,UA1CqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACLC,GAAYC,EAAAA,EAAAA,MAAhBC,GACRC,GAA0BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8Bb,EAAAA,EAAAA,UAC5BN,EAASoB,MAAQpB,EAASoB,MAAMC,KAAO,MACxCC,GAAAd,EAAAA,EAAAA,GAAAW,EAAA,GAFMI,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAqB1B,OAjBAG,EAAAA,EAAAA,YAAU,WACRP,GAAa,GACbJ,EAAS,MACTJ,EAAS,OAETgB,EAAAA,EAAAA,IAAgB,CAAExB,QAAAA,IACfyB,MAAK,SAAAC,GAAI,OAAIlB,EAASkB,EAAKA,KAAK,IAChCC,OAAM,SAAAhB,GAAK,OAAIC,EAASD,EAAMiB,QAAQ,IACtCC,SAAQ,kBAAMb,GAAa,EAAM,GACtC,GAAG,CAAChB,KAEJuB,EAAAA,EAAAA,YAAU,WACJzB,EAASoB,OACXI,EAAWxB,EAASoB,MAAMC,KAE9B,GAAG,CAACrB,EAASoB,SAGXY,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGX,IACCY,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAId,EAAQW,UAChBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAGXjB,IAAakB,EAAAA,EAAAA,KAACG,EAAAA,GAAM,IACpBzB,IAASsB,EAAAA,EAAAA,KAACI,EAAAA,GAAK,CAAC1B,MAAOA,IACvBJ,IAAS0B,EAAAA,EAAAA,KAACK,EAAAA,GAAE,CAAC/B,MAAOA,KACrB0B,EAAAA,EAAAA,KAACM,EAAAA,GAAM,MAGb,C","sources":["pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'api/movieDBApi';\nimport { useEffect, useState } from 'react';\nimport { Error, Loader, MovieDetails as MD } from 'components';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const { id: movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backUrl, setBackUrl] = useState(\n    location.state ? location.state.from : null\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setMovie(null);\n\n    getMovieDetails({ movieId })\n      .then(data => setMovie(data.data))\n      .catch(error => setError(error.message))\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  useEffect(() => {\n    if (location.state) {\n      setBackUrl(location.state.from);\n    }\n  }, [location.state]);\n\n  return (\n    <>\n      {backUrl && (\n        <Link to={backUrl}>\n          <button>Go back</button>\n        </Link>\n      )}\n      {isLoading && <Loader />}\n      {error && <Error error={error} />}\n      {movie && <MD movie={movie} />}\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["location","useLocation","movieId","useParams","id","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","_useState7","state","from","_useState8","backUrl","setBackUrl","useEffect","getMovieDetails","then","data","catch","message","finally","_jsxs","_Fragment","children","_jsx","Link","to","Loader","Error","MD","Outlet"],"sourceRoot":""}